generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // provider = "sqlite" // use for local test db with DATABASE_URL=file:./dev.db
    url      = env("DATABASE_URL")
}

model User {
    id              String         @id @unique @default(cuid())
    provider_id     String         @unique
    fb_id           String         @unique
    hashed_password String?
    session         Session[]
    email           String
    email_verified  Boolean
    JournalEntry    JournalEntry[]
    SharedEntry     SharedEntry[]
    Habit           Habit[]
    SharedHabit     SharedHabit[]

    @@map("user")
}

model Session {
    id           String @id @unique
    user_id      String
    expires      BigInt
    idle_expires BigInt
    user         User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

//TODO: change from camel case to snake case?
model JournalEntry {
    id          Int           @id @default(autoincrement())
    user_id     String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime?     @updatedAt
    title       String        @db.VarChar(255)
    body        String        @db.LongText
    preview     String        @default("") @db.VarChar(1000)
    user        User          @relation(references: [id], fields: [user_id], onDelete: Cascade)
    SharedEntry SharedEntry[]
    tags        String        @default("") @db.VarChar(255) // list of string separated by comma

    @@index([user_id])
    @@map("journal_entry")
}

model SharedEntry {
    entry_id Int
    user_id  String
    entry    JournalEntry @relation(references: [id], fields: [entry_id], onDelete: Cascade)
    user     User         @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@id([entry_id, user_id])
    @@map("shared_entry")
}

//TODO: add streak info? streak & longest streak
//TODO: add index for ordering on dashboard?
model Habit {
    id          Int           @id @default(autoincrement())
    user_id     String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    type        String        @db.VarChar(255)
    name        String        @db.VarChar(255)
    user        User          @relation(references: [id], fields: [user_id], onDelete: Cascade)
    HabitEntry  HabitEntry[]
    SharedHabit SharedHabit[]

    @@index([user_id])
}

model SharedHabit {
    habit_id Int
    user_id  String
    habit    Habit  @relation(references: [id], fields: [habit_id], onDelete: Cascade)
    user     User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@id([habit_id, user_id])
    @@map("shared_habit")
}

model HabitEntry {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    habit_id  Int
    habit     Habit    @relation(references: [id], fields: [habit_id], onDelete: Cascade)
    date      DateTime
    value     Int
}
